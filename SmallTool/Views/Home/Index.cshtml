@model ImmutableList<BranchTuple>
@{
    ViewData["Title"] = "Builds";
}

<div class="row row-cols-1 row-cols-md-3 mb-3 text-center">
  <div class="col-sm-4 padding-0">
    <div class="card-header py-3">
      <h4 class="my-0 fw-normal">Ветки</h4>
    </div>
    <div class="list-group list-group-checkable">
      @{
        int i = 0;
        foreach (var branchTuple in Model)
        {
          var id = $"radio_{branchTuple.GetName().IfNone("None")}";
          <input class="list-group-item-check" type="radio" name="listGroupCheckableRadios" id=@id value="" checked onchange="changeAvailableCommands()">
          <label class="list-group-item py-3" for=@id>
            @branchTuple.GetName().IfNone("Ручная сборка или без меты") (@Html.CreateStatus(branchTuple.GetStatus()))
            <span class="d-block small opacity-50">@branchTuple.LocalBuild.Match(b=>$"Хеш {b.GetFresh().CommitHash} от {b.GetFresh().CreatedTime.Date}", "")</span>
          </label>
          i++;
        }
      }
    </div>
  </div>
  <div class="col-sm-6 padding-0">
    <div class="card-header py-3">
      <h4 class="my-0 fw-normal">Действия</h4>
    </div>
    <div id="commandList">
      <button type="button" class="btn btn-block" name="FetchRunCommand" onclick="executeCommand(this.name)">
        Обновить и запустить DemoGames
      </button>
      <button type="button" class="btn btn-block" name="FetchCommand" onclick="executeCommand(this.name)">
        Обновить файлы DemoGames без запуска
      </button>
      <button type="button" class="btn btn-block" name="RunCommand" onclick="executeCommand(this.name)">
        Запустить DemoGames
      </button>
      <button type="button" class="btn btn-block" name="LocalOpenFolderCommand" onclick="executeCommand(this.name)">
        Открыть локальную папку с DemoGames в проводнике
        <span class="d-block small opacity-50">D:\Files</span>
      </button>
      <button type="button" class="btn btn-block" name="RemoteOpenFolderCommand" onclick="executeCommand(this.name)">
        Открыть удаленную папку с DemoGames в проводнике
        <span class="d-block small opacity-50">Z:\Магиум\Builds</span>
      </button>
      <button type="button" class="btn btn-block btn-outline-danger" name="DeleteCommand" onclick="executeCommand(this.name)">
        Удалить локально
      </button>
    </div>
  </div>
</div>
@* <button class="btn btn-primary" onclick="showDialog()">Click me please</button> *@
@* <button class="btn btn-primary" onclick="clearButtons()">Cclear buttons</button> *@
@* <button class="btn btn-primary" onclick="getCheckedRadioName()">Log checked</button> *@

<script>
  window.addEventListener("load", function(event) {
    changeAvailableCommands();
  });
</script>

<script>
  async function showDialog(){
      await fetch("/api/Branch/", {method: 'POST'});
  }
  
  function clearButtons(){
      let list = document.getElementById("buttonsList");
      let child = list.lastElementChild; 
        while (child) {
            list.removeChild(child);
            child = list.lastElementChild;
        }
  }
  
  function getCheckedRadioName(){
    let id = document.querySelector('input[name="listGroupCheckableRadios"]:checked').id.replace("radio_", "");
    return id;
  }
  
  async function executeCommand(commandName){
    let url = "/Command/Execute?" + $.param({command: commandName, branch: getCheckedRadioName()});
    await fetch(url, {method: 'POST'});
  }
  
  async function changeAvailableCommands(){
    let buttons = document.getElementById("commandList").querySelectorAll('button');
    let branch = getCheckedRadioName();
    for (const button of buttons) {
      let url = "/Command/IsAvailable?" + $.param({command: button.name, branch: branch});
      let response = await fetch(url, {method: 'GET'});
      if (response.ok)
      {
        button.disabled = !(await response.json());
      }
      else
      {
        button.disabled = false;
      }
    }
  }
</script>